name: Build & Release

on:
  workflow_dispatch:

permissions:
  contents: write       # garante permissão de gravação no repositório

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV
          code_server=$(grep '^code_server: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "CSVERSION=$code_server" >> $GITHUB_ENV

      - name: Download code-server
        run: |
          wget -O assets/code-server-${{ env.CSVERSION }}-linux-arm64.tar.gz \
            https://github.com/coder/code-server/releases/download/v${{ env.CSVERSION }}/code-server-${{ env.CSVERSION }}-linux-arm64.tar.gz

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build APK
        run: |
          flutter build apk --release --split-per-abi \
            --dart-define=VERSION=${{ env.VERSION }} \
            --dart-define=CSVERSION=${{ env.CSVERSION }}

      # Se precisar reativar lógica de tag, descomente abaixo:
      # - name: Check if Tag Exists
      #   id: check_tag
      #   run: |
      #     if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
      #       echo "TAG_EXISTS=true" >> $GITHUB_ENV
      #     else
      #       echo "TAG_EXISTS=false" >> $GITHUB_ENV
      #     fi

      - name: Build APK
        run: flutter build apk --release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
